- name: Compress JSON files for FTP2
  run: |
    echo "=== COMPRIMIENDO ARCHIVOS PARA FTP ==="
    
    # Comprimir archivos JSON con gzip
    for file in ./output/0*.json; do
        if [ -f "$file" ]; then
            echo "Comprimiendo: $(basename $file)"
            gzip -9 -c "$file" > "${file}.gz"
            original_size=$(stat -c%s "$file")
            compressed_size=$(stat -c%s "${file}.gz")
            compression_ratio=$(( (compressed_size * 100) / original_size ))
            echo "  ${original_size} bytes ‚Üí ${compressed_size} bytes (${compression_ratio}%)"
        fi
    done
    
    echo "=== ARCHIVOS COMPRIMIDOS ==="
    ls -la ./output/*.gz

- name: Upload compressed files to FTP
  env:
    FTP_SERVER: ${{ secrets.FTP_SERVER }}
    FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
    FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
    FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
  run: |
    echo '=== SUBIENDO ARCHIVOS COMPRIMIDOS ==='
    
    # Verificar que las variables est√©n configuradas
    if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
        echo "‚ùå ERROR: Variables FTP no configuradas correctamente"
        exit 1
    fi
    
    REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
    BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"
    
    echo "Subiendo a: ${BASE_URL}/"
    
    # Archivos comprimidos a subir
    FILES=("01events.json.gz" "02info.json.gz")
    
    for file in "${FILES[@]}"; do
        local_file="./output/$file"
        
        if [ ! -f "$local_file" ]; then
            echo "‚ùå Archivo $file no encontrado"
            continue
        fi
        
        echo "üì§ Subiendo: $file (comprimido)"
        
        # Subir archivo comprimido
        curl --fail \
             --ssl-reqd \
             --ftp-create-dirs \
             --disable-epsv \
             --ftp-skip-pasv-ip \
             --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
             --upload-file "$local_file" \
             "${BASE_URL}/$file"
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ $file subido exitosamente"
            
            # Opcional: tambi√©n subir el archivo descomprimido si es peque√±o
            if [ "$file" = "01events.json.gz" ]; then
                echo "üì§ Subiendo tambi√©n versi√≥n descomprimida: 01events.json"
                curl --fail \
                     --ssl-reqd \
                     --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                     --upload-file "./output/01events.json" \
                     "${BASE_URL}/01events.json" || echo "‚ö†Ô∏è  No se pudo subir versi√≥n descomprimida"
            fi
            
        else
            echo "‚ùå Error subiendo $file"
            echo "Intentando subir archivo original sin comprimir..."
            
            # Intentar subir el archivo original
            original_file=${file%.gz}
            curl --fail \
                 --ssl-reqd \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 --upload-file "./output/$original_file" \
                 "${BASE_URL}/$original_file" && \
            echo "‚úÖ $original_file subido exitosamente" || \
            echo "‚ùå Error subiendo $original_file tambi√©n"
        fi
        
        sleep 1
    done

- name: Create backup of uncompressed files
  run: |
    echo "=== CREANDO BACKUP LOCAL ==="
    mkdir -p ./backup
    cp ./output/01events.json ./backup/
    cp ./output/02info.json ./backup/
    echo "Backup creado en ./backup/"

- name: Upload backup as artifact
  uses: actions/upload-artifact@v4
  with:
    name: json-backup-uncompressed
    path: |
      ./backup/01events.json
      ./backup/02info.json
    retention-days: 7
