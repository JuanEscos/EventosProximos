name: FlowAgility Scraper

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:  # Permitir ejecución manual

jobs:
  scrape-and-process:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directory
      run: mkdir -p ./output

    - name: Verify dependencies
      run: |
        echo '=== VERIFICANDO DEPENDENCIAS ==='
        python -c "
        try:
            import selenium; print('✅ Selenium:', selenium.__version__)
            import pandas; print('✅ Pandas:', pandas.__version__) 
            import bs4; print('✅ BeautifulSoup:', bs4.__version__)
            from webdriver_manager.chrome import ChromeDriverManager; print('✅ Webdriver Manager disponible')
        except ImportError as e:
            print('❌ Error:', e); exit(1)
        "

    - name: Run Python scraper
      run: python ./extraerParticipantesEventosProxBeta.py --module all

    - name: Verify generated files
      run: |
        echo '=== VERIFICANDO ARCHIVOS REQUERIDOS ==='
        
        required_files=("01events_*.json" "02competiciones_detalladas_*.json" "participantes_procesado_*.csv" "participants_completos_final.json")
        missing_files=0
        
        for pattern in "${required_files[@]}"; do
            # Buscar el archivo más reciente que coincida con el patrón
            latest_file=$(find ./output -name "$pattern" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
            
            if [ -n "$latest_file" ] && [ -f "$latest_file" ]; then
                file_info=$(ls -la "$latest_file")
                echo "✅ $pattern: ENCONTRADO ($file_info)"
            else
                echo "❌ $pattern: NO ENCONTRADO"
                missing_files=$((missing_files + 1))
                
                # Mostrar qué archivos existen en el directorio para debug
                echo "   Archivos existentes en ./output/:"
                ls -la ./output/ 2>/dev/null | head -5 || echo "   No se puede listar el directorio"
            fi
        done
        
        echo "=== RESUMEN ==="
        if [ $missing_files -eq 0 ]; then
            echo "✅ TODOS los archivos requeridos están presentes"
        else
            echo "❌ Faltan $missing_files archivos requeridos"
            echo "=== ARCHIVOS EXISTENTES EN ./output/ ==="
            ls -la ./output/ 2>/dev/null || echo "No se puede acceder al directorio ./output/"
            exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flowagility-data
        path: |
          ./output/01events_*.json
          ./output/02competiciones_detalladas_*.json
          ./output/participantes_procesado_*.csv
          ./output/participants_completos_final.json
        retention-days: 7

    - name: Upload to FTP
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
      run: |
        echo '=== SUBIENDO ARCHIVOS POR FTP ==='
        
        # Encontrar archivos más recientes
        events_file=$(find ./output -name "01events_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        detailed_file=$(find ./output -name "02competiciones_detalladas_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        csv_file=$(find ./output -name "participantes_procesado_*.csv" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        final_file=$(find ./output -name "participants_completos_final.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        
        BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones"
        
        # Subir cada archivo
        for file in "$events_file" "$detailed_file" "$csv_file" "$final_file"; do
            if [ -f "$file" ]; then
                filename=$(basename "$file")
                echo "Subiendo: $filename"
                curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
                     --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                     --upload-file "$file" \
                     "${BASE}/$filename"
            fi
        done
