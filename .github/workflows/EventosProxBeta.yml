name: Agility - Unificado (01+02+03+04)Beta

on:
  schedule:
    - cron: '5 4 * * *'  # diario 04:05 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: agility-unificado
  cancel-in-progress: true

jobs:
  run_all:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      TZ: Europe/Madrid
      OUT_DIR: ./output
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS: ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"
      MAX_SCROLLS: "10"
      SCROLL_WAIT_S: "2.0"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps con verificación
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install beautifulsoup4 lxml selenium webdriver-manager python-dateutil numpy pandas python-dotenv

          python - << 'PY'
          try:
              import selenium, pandas, bs4
              from webdriver_manager.chrome import ChromeDriverManager
              print('✅ Selenium:', selenium.__version__)
              print('✅ Pandas:', pandas.__version__)
              print('✅ BeautifulSoup OK')
              print('✅ Webdriver Manager OK:', ChromeDriverManager)
          except Exception as e:
              print('❌ Error:', e)
              raise
          PY

      - name: Install Google Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Run unificado con logging detallado
        id: run_unificado
        timeout-minutes: 90
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$OUT_DIR"

          echo "=== VERIFICANDO DEPENDENCIAS ==="
          python - << 'PY'
          import selenium, pandas
          import bs4
          from webdriver_manager.chrome import ChromeDriverManager
          print('✅ Selenium:', selenium.__version__)
          print('✅ Pandas:', pandas.__version__)
          print('✅ bs4 OK')
          print('✅ Webdriver Manager disponible:', ChromeDriverManager)
          PY

          echo "=== EJECUTANDO SCRIPT PYTHON ==="
          python "./extraerParticipantesEventosProxBeta.py" --module all

          echo "=== ARCHIVOS GENERADOS ==="
          ls -la "$OUT_DIR" || true

          echo "=== TAMAÑOS DE ARCHIVOS ==="
          du -h "$OUT_DIR"/* 2>/dev/null || true

          echo "=== CONTENIDO DE ARCHIVOS JSON (sample) ==="
          for json_file in "$OUT_DIR"/*.json; do
            if [ -f "$json_file" ]; then
              echo "--- $json_file (primeras 2 líneas) ---"
              head -2 "$json_file" || true
              echo ""
            fi
          done

          echo "=== VERIFICANDO ARCHIVOS REQUERIDOS ==="
          required_files=(
            "01events_*.json"
            "02competiciones_detalladas_*.json"
            "participantes_procesado_*.csv"
            "participants_completos_final.json"
          )

          missing_files=0
          for pattern in "${required_files[@]}"; do
            files=($(ls -1t ./output/$pattern 2>/dev/null | head -1 || true))
            if [ -n "${files:-}" ] && [ -f "${files:-}" ]; then
              echo "✅ $pattern: ENCONTRADO ($(ls -la "${files:-}"))"
            else
              echo "❌ $pattern: NO ENCONTRADO"
              missing_files=$((missing_files + 1))
            fi
          done

          if [ $missing_files -gt 0 ]; then
            echo "❌ Faltan $missing_files archivos requeridos"
            exit 1
          fi

      - name: Upload artifact (todo el output)
        uses: actions/upload-artifact@v4
        with:
          name: a-unificado-output
          path: ./output
          if-no-files-found: error
          retention-days: 10

      - name: FTPS upload (carpeta específica)
        timeout-minutes: 20
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"

          one_or_fail() { 
            pat="$1"
            f=$(ls -1t ./output/$pat 2>/dev/null | head -n1 || true)
            if [ -z "$f" ]; then
              echo "::error::No encontrado output/$pat"; exit 1
            fi
            echo "$f"
          }

          F01=$(one_or_fail "01events_*.json")
          F02=$(one_or_fail "02competiciones_detalladas_*.json")
          F03=$(one_or_fail "participantes_procesado_*.csv")
          F04=$(one_or_fail "participants_completos_final.json")

          echo "Tamaños de archivos:"
          ls -lh "$F01" "$F02" "$F03" "$F04"

          echo "Subiendo a ${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/"

          upload_with_lftp () {
            local file="$1"; local remote_name="$2"
            lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e "
              set cmd:fail-exit true;
              set net:timeout 120;
              set net:max-retries 10;
              set net:persist-retries 10;
              set net:reconnect-interval-base 5;
              set net:reconnect-interval-max 30;
              set ftp:ssl-force true;
              set ftp:ssl-protect-data true;
              set ftp:ssl-allow true;
              set ftp:ssl-session-reuse no;
              set ftp:passive-mode true;
              set ftp:prefer-epsv true;
              set ftp:use-feat true;
              set dns:order \"inet\";
              cd '${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows';
              put '${file}' -o '${remote_name}';
              bye"
          }

          upload_with_curl () {
            # Fallback FTPS explícito con curl
            local file="$1"; local remote_name="$2"
            curl --fail --silent --show-error \
                 --ftp-ssl --ssl-reqd --ftp-method nocwd \
                 --connect-timeout 30 --max-time 300 --retry 5 --retry-delay 5 \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 -T "${file}" \
                 "ftps://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/${remote_name}"
          }

          upload_file () {
            local file="$1"; local remote_name="$2"
            echo "Subiendo: $file -> $remote_name"

            # Intentos con lftp
            for attempt in {1..3}; do
              echo "lftp intento $attempt/3..."
              if upload_with_lftp "$file" "$remote_name"; then
                echo "✅ $remote_name subido con lftp"
                return 0
              else
                echo "⚠️ lftp falló (intento $attempt), reintento en 5s..."
                sleep 5
              fi
            done

            # Fallback con curl
            echo "↪️  Probando fallback con curl FTPS..."
            if upload_with_curl "$file" "$remote_name"; then
              echo "✅ $remote_name subido con curl (fallback)"
              return 0
            else
              echo "❌ Fallback curl también falló para $remote_name"
              return 1
            fi
          }

          upload_file "$F01" "01events_last.json"
          upload_file "$F01" "01events_${TS}.json"
          upload_file "$F02" "02info_last.json"
          upload_file "$F02" "02info_${TS}.json"
          upload_file "$F03" "participantes_procesado_${TS}.csv"
          upload_file "$F04" "participants_completos_final_last.json"
          upload_file "$F04" "participants_completos_final_${TS}.json"
          echo "✅ Todos los archivos subidos exitosamente a Competiciones/ListadoEventos/Workflows/"

      - name: (Verify) lista archivos remotos
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Listando archivos en ${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/"
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set net:timeout 30; \
            cd '${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows'; \
            ls -la; \
            bye" || echo "⚠️ No se pudo listar directorio, pero la subida probablemente fue exitosa"

      - name: Notificar éxito
        if: success()
        run: echo "✅ Workflow completado exitosamente - $(date)"

      - name: Notificar fallo
        if: failure()
        run: echo "❌ Workflow falló - Verifica los logs para más detalles - $(date)"
