name: EventosProxMod1_2

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:  # Permitir ejecuci√≥n manual

jobs:
  scrape-and-process:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      MAX_SCROLLS: "15"
      SCROLL_WAIT_S: "3.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser chromium-chromedriver curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directory
      run: mkdir -p ./output

    - name: Run Python scraper
      timeout-minutes: 30
      run: |
        echo "=== EJECUTANDO SCRAPER ==="
        python ./extraerParticipantesEventosProxBeta.py --module all
        echo "=== SCRAPER COMPLETADO ==="

    - name: Verify generated files
      run: |
        echo '=== VERIFICANDO ARCHIVOS GENERADOS ==='
        
        # Buscar archivos m√°s recientes con fecha y crear enlaces fijos
        events_file=$(find ./output -name "01events_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        info_file=$(find ./output -name "02info_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        
        missing_files=0
        
        if [ -n "$events_file" ] && [ -f "$events_file" ]; then
            cp "$events_file" "./output/01events.json"
            echo "‚úÖ 01events.json creado desde: $(basename $events_file)"
        else
            echo "‚ùå No se encontr√≥ archivo de eventos"
            missing_files=$((missing_files + 1))
        fi
        
        if [ -n "$info_file" ] && [ -f "$info_file" ]; then
            cp "$info_file" "./output/02info.json"
            echo "‚úÖ 02info.json creado desde: $(basename $info_file)"
        else
            echo "‚ùå No se encontr√≥ archivo de info"
            missing_files=$((missing_files + 1))
        fi
        
        # Verificar que existen los archivos finales
        required_files=("01events.json" "02info.json")
        
        for file in "${required_files[@]}"; do
            if [ -f "./output/$file" ]; then
                file_size=$(stat -c%s "./output/$file")
                echo "‚úÖ $file: ENCONTRADO (${file_size} bytes)"
            else
                echo "‚ùå $file: NO ENCONTRADO"
                missing_files=$((missing_files + 1))
            fi
        done
        
        # Mostrar todos los archivos en output para debugging
        echo "=== ARCHIVOS EN ./output/ ==="
        ls -la ./output/ || echo "No se puede acceder al directorio ./output/"
        
        if [ $missing_files -eq 0 ]; then
            echo "‚úÖ TODOS los archivos requeridos est√°n presentes"
        else
            echo "‚ùå Faltan $missing_files archivos requeridos"
            exit 1
        fi

    - name: Upload to FTP using curl (FTPS con TLS)
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
      run: |
        echo '=== SUBIENDO ARCHIVOS POR FTPS ==='
        
        # Verificar que las variables est√©n configuradas
        if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
            echo "‚ùå ERROR: Variables FTP no configuradas correctamente"
            exit 1
        fi
        
        # Directorio remoto
        REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
        BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"
        
        echo "Subiendo a: ${BASE_URL}/"
        
        # Archivos a subir
        FILES=("01events.json" "02info.json")
        
        # Subir cada archivo usando FTPS (TLS expl√≠cito)
        for file in "${FILES[@]}"; do
            local_file="./output/$file"
            
            if [ ! -f "$local_file" ]; then
                echo "‚ùå Archivo $file no encontrado"
                exit 1
            fi
            
            echo "üì§ Subiendo: $file"
            
            # Usar curl con FTPS (TLS expl√≠cito)
            curl --fail \
                 --ssl-reqd \
                 --ftp-create-dirs \
                 --disable-epsv \
                 --ftp-skip-pasv-ip \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 --upload-file "$local_file" \
                 "${BASE_URL}/$file"
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ $file subido exitosamente"
            else
                echo "‚ùå Error subiendo $file"
                echo "Intentando sin TLS como fallback..."
                
                # Fallback sin TLS
                curl --fail \
                     --ftp-create-dirs \
                     --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                     --upload-file "$local_file" \
                     "ftp://${FTP_SERVER}${REMOTE_DIR}/$file"
                
                if [ $? -eq 0 ]; then
                    echo "‚úÖ $file subido exitosamente (sin TLS)"
                else
                    echo "‚ùå Error persistente subiendo $file"
                    exit 1
                fi
            fi
            
            sleep 2
        done
        
        echo "üéâ Todos los archivos subidos exitosamente"

    - name: Upload artifacts (backup)
      uses: actions/upload-artifact@v4
      with:
        name: flowagility-data-backup
        path: |
          ./output/01events.json
          ./output/02info.json
        retention-days: 3

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== DEBUGGING FAILURE ==="
        echo "Listando archivos en output:"
        ls -la ./output/ 2>/dev/null || echo "No output directory"
        echo "=== VERIFICANDO CHROME ==="
        which google-chrome-stable && echo "Chrome encontrado" || echo "Chrome NO encontrado"
        which chromedriver && echo "Chromedriver encontrado" || echo "Chromedriver NO encontrado"
        echo "=== VERSIONES ==="
        google-chrome-stable --version || echo "No se puede obtener versi√≥n de Chrome"
        chromedriver --version || echo "No se puede obtener versi√≥n de Chromedriver"
