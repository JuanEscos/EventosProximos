name: EventosProxMod1_2

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:  # Permitir ejecución manual

jobs:
  scrape-and-process:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      MAX_SCROLLS: "15"
      SCROLL_WAIT_S: "3.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser chromium-chromedriver curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directory
      run: mkdir -p ./output

    - name: Run Python scraper
      timeout-minutes: 30
      run: |
        echo "=== EJECUTANDO SCRAPER ==="
        python ./extraerParticipantesEventosProxBeta.py --module all
        echo "=== SCRAPER COMPLETADO ==="

    - name: Verify generated files
      run: |
        echo '=== VERIFICANDO ARCHIVOS GENERADOS ==='
        
        # Buscar archivos más recientes con fecha y crear enlaces fijos
        events_file=$(find ./output -name "01events_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        info_file=$(find ./output -name "02info_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
        
        missing_files=0
        
        if [ -n "$events_file" ] && [ -f "$events_file" ]; then
            cp "$events_file" "./output/01events.json"
            echo "✅ 01events.json creado desde: $(basename $events_file)"
        else
            echo "❌ No se encontró archivo de eventos"
            missing_files=$((missing_files + 1))
        fi
        
        if [ -n "$info_file" ] && [ -f "$info_file" ]; then
            cp "$info_file" "./output/02info.json"
            echo "✅ 02info.json creado desde: $(basename $info_file)"
        else
            echo "❌ No se encontró archivo de info"
            missing_files=$((missing_files + 1))
        fi
        
        # Verificar que existen los archivos finales
        required_files=("01events.json" "02info.json")
        
        for file in "${required_files[@]}"; do
            if [ -f "./output/$file" ]; then
                file_size=$(stat -c%s "./output/$file")
                echo "✅ $file: ENCONTRADO (${file_size} bytes)"
            else
                echo "❌ $file: NO ENCONTRADO"
                missing_files=$((missing_files + 1))
            fi
        done
        
        # Mostrar todos los archivos en output para debugging
        echo "=== ARCHIVOS EN ./output/ ==="
        ls -la ./output/ || echo "No se puede acceder al directorio ./output/"
        
        if [ $missing_files -eq 0 ]; then
            echo "✅ TODOS los archivos requeridos están presentes"
        else
            echo "❌ Faltan $missing_files archivos requeridos"
            exit 1
        fi

    - name: Debug FTP configuration
      run: |
        echo "=== CONFIGURACIÓN FTP ==="
        echo "FTP_SERVER: ${FTP_SERVER:+(configurado)}"
        echo "FTP_USERNAME: ${FTP_USERNAME:+(configurado)}"
        echo "FTP_PASSWORD: ${FTP_PASSWORD:+(configurado)}"
        echo "FTP_REMOTE_DIR: ${FTP_REMOTE_DIR:+(configurado)}"
        echo "=== VERIFICANDO CONEXIÓN FTP ==="

    - name: Upload to FTP using curl
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
      run: |
        echo '=== SUBIENDO ARCHIVOS POR FTP (usando curl) ==='
        
        # Verificar que las variables estén configuradas
        if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
            echo "❌ ERROR: Variables FTP no configuradas correctamente"
            echo "FTP_SERVER: $FTP_SERVER"
            echo "FTP_USERNAME: $FTP_USERNAME"
            echo "FTP_PASSWORD: ${FTP_PASSWORD:+(configurada)}"
            exit 1
        fi
        
        # Directorio remoto
        REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
        echo "Subiendo a: ftp://$FTP_SERVER$REMOTE_DIR/"
        
        # Archivos a subir
        FILES=("01events.json" "02info.json")
        
        # Configuración de reintentos
        MAX_RETRIES=3
        RETRY_DELAY=10
        
        # Función para subir un archivo
        upload_file() {
            local file="$1"
            local local_file="./output/$file"
            local remote_url="ftp://$FTP_SERVER$REMOTE_DIR/$file"
            
            echo "📤 Subiendo: $file"
            echo "   Local: $local_file"
            echo "   Remoto: $remote_url"
            
            # Verificar que el archivo local existe
            if [ ! -f "$local_file" ]; then
                echo "❌ ERROR: Archivo local no encontrado: $local_file"
                return 1
            fi
            
            # Intentar subida con múltiples reintentos
            for attempt in $(seq 1 $MAX_RETRIES); do
                echo "   Intento $attempt/$MAX_RETRIES..."
                
                # Subir archivo con curl
                curl --ftp-create-dirs \
                     --user "$FTP_USERNAME:$FTP_PASSWORD" \
                     --upload-file "$local_file" \
                     "$remote_url" \
                     --connect-timeout 30 \
                     --max-time 120 \
                     --retry 2 \
                     --retry-delay 5 \
                     --fail \
                     --show-error \
                     --verbose
                
                CURL_EXIT_CODE=$?
                
                if [ $CURL_EXIT_CODE -eq 0 ]; then
                    echo "✅ $file subido exitosamente (intento $attempt)"
                    return 0
                else
                    echo "❌ Error en intento $attempt (código: $CURL_EXIT_CODE)"
                    
                    if [ $attempt -lt $MAX_RETRIES ]; then
                        echo "⏳ Esperando $RETRY_DELAY segundos antes de reintentar..."
                        sleep $RETRY_DELAY
                    fi
                fi
            done
            
            echo "❌ Todos los intentos fallaron para $file"
            return 1
        }
        
        # Probar conexión básica al FTP
        echo "🧪 Probando conexión FTP..."
        timeout 20 curl --user "$FTP_USERNAME:$FTP_PASSWORD" \
            "ftp://$FTP_SERVER/" \
            --connect-timeout 15 \
            --max-time 20 \
            --silent \
            --list-only \
            --fail
        
        if [ $? -eq 0 ]; then
            echo "✅ Conexión FTP exitosa"
        else
            echo "⚠️  No se pudo listar directorio raíz, continuando igual..."
        fi
        
        # Subir cada archivo
        ALL_SUCCESS=true
        for file in "${FILES[@]}"; do
            if ! upload_file "$file"; then
                ALL_SUCCESS=false
                echo "❌ Error crítico subiendo $file"
            fi
            echo ""
        done
        
        # Verificar resultado final
        if [ "$ALL_SUCCESS" = true ]; then
            echo "🎉 TODOS los archivos subidos exitosamente"
            echo "📍 Ubicación: ftp://$FTP_SERVER$REMOTE_DIR/"
        else
            echo "❌ Algunos archivos fallaron al subir"
            echo "=== ESTADO FINAL ==="
            echo "Revisa las configuraciones FTP en GitHub Secrets"
            exit 1
        fi

    - name: Upload artifacts (backup)
      uses: actions/upload-artifact@v4
      with:
        name: flowagility-data-backup
        path: |
          ./output/01events.json
          ./output/02info.json
        retention-days: 3

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== DEBUGGING FAILURE ==="
        echo "Listando archivos en output:"
        ls -la ./output/ 2>/dev/null || echo "No output directory"
        echo "=== VARIABLES FTP (solo nombres) ==="
        echo "FTP_SERVER: ${FTP_SERVER:+(set)}"
        echo "FTP_USERNAME: ${FTP_USERNAME:+(set)}"
        echo "FTP_PASSWORD: ${FTP_PASSWORD:+(set)}"
        echo "FTP_REMOTE_DIR: ${FTP_REMOTE_DIR:+(set)}"
        echo "=== ÚLTIMOS LOGS ==="
        tail -20 /home/runner/work/_temp/*.log 2>/dev/null || echo "No logs found"
