name: EventosProxMod1_2

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:  # Permitir ejecución manual

jobs:
  scrape-and-process:
    runs-on: ubuntu-22.04
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      MAX_SCROLLS: "15"
      SCROLL_WAIT_S: "3.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        
        # Instalar Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Instalar ChromeDriver compatible
        CHROME_VERSION=$(google-chrome-stable --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        echo "Chrome version: $CHROME_VERSION"
        
        # Descargar ChromeDriver específico para la versión
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
        CHROMEDRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
        
        # Intentar descargar la versión específica
        if wget -q --spider "$CHROMEDRIVER_URL"; then
            echo "Descargando ChromeDriver $CHROME_VERSION"
            wget -O chromedriver.zip "$CHROMEDRIVER_URL"
            unzip -o chromedriver.zip
            sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver
        else
            echo "Usando ChromeDriver de apt como fallback"
            sudo apt-get install -y chromium-chromedriver
            sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver
        fi
        
        # Verificar instalaciones
        which google-chrome-stable
        which chromedriver
        google-chrome-stable --version
        chromedriver --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium beautifulsoup4 python-dotenv lxml requests

    - name: Create output directory
      run: mkdir -p ./output

    - name: Run Python scraper
      timeout-minutes: 30
      run: |
        echo "=== EJECUTANDO SCRAPER ==="
        python ./extraerParticipantesEventosProx.py --module all
        echo "=== SCRAPER COMPLETADO ==="

    - name: Verify generated files
      run: |
        echo '=== VERIFICANDO ARCHIVOS GENERADOS ==='
        ls -la ./output/
        
        # Verificar que existen los archivos finales
        missing_files=0
        required_files=("01events.json" "02info.json")
        
        for file in "${required_files[@]}"; do
            if [ -f "./output/$file" ]; then
                file_size=$(stat -c%s "./output/$file")
                echo "✅ $file: ENCONTRADO (${file_size} bytes)"
            else
                echo "❌ $file: NO ENCONTRADO"
                missing_files=$((missing_files + 1))
            fi
        done
        
        if [ $missing_files -eq 0 ]; then
            echo "✅ TODOS los archivos requeridos están presentes"
        else
            echo "❌ Faltan $missing_files archivos requeridos"
            exit 1
        fi

    - name: Upload to FTP using curl (FTPS con TLS)
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
      run: |
        echo '=== SUBIENDO ARCHIVOS POR FTPS ==='
        
        # Verificar que las variables estén configuradas
        if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
            echo "❌ ERROR: Variables FTP no configuradas correctamente"
            exit 1
        fi
        
        # Directorio remoto
        REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/EventosProx/Flow/data"
        BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"
        
        echo "Subiendo a: ${BASE_URL}/"
        
        # Archivos a subir
        FILES=("01events.json" "02info.json")
        
        # Subir cada archivo usando FTPS (TLS explícito)
        for file in "${FILES[@]}"; do
            local_file="./output/$file"
            
            if [ ! -f "$local_file" ]; then
                echo "❌ Archivo $file no encontrado"
                exit 1
            fi
            
            echo "📤 Subiendo: $file"
            
            # Usar curl con FTPS (TLS explícito) - similar a tu script funcionando
            curl --fail \
                 --ssl-reqd \
                 --ftp-create-dirs \
                 --disable-epsv \
                 --ftp-skip-pasv-ip \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 --upload-file "$local_file" \
                 "${BASE_URL}/$file"
            
            if [ $? -eq 0 ]; then
                echo "✅ $file subido exitosamente"
            else
                echo "❌ Error subiendo $file"
                exit 1
            fi
            
            sleep 1
        done
        
        echo "🎉 Todos los archivos subidos exitosamente"

    - name: Upload artifacts (backup)
      uses: actions/upload-artifact@v4
      with:
        name: flowagility-data-backup
        path: |
          ./output/01events.json
          ./output/02info.json
        retention-days: 3

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== DEBUGGING FAILURE ==="
        echo "Listando archivos en output:"
        ls -la ./output/ 2>/dev/null || echo "No output directory"
        echo "=== VERIFICANDO CHROME ==="
        which google-chrome-stable && echo "Chrome encontrado: $(google-chrome-stable --version)" || echo "Chrome NO encontrado"
        which chromedriver && echo "Chromedriver encontrado: $(chromedriver --version)" || echo "Chromedriver NO encontrado"
