#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FLOWAGILITY SCRAPER - EXTRACCI√ìN DE EVENTOS E INFORMACI√ìN DETALLADA
FLOWAGILITY SCRAPER - SISTEMA AUTOMATIZADO DE EXTRACCI√ìN DE DATOS

üåê DESCRIPCI√ìN DEL PROCESO:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Este sistema realiza la extracci√≥n automatizada de informaci√≥n de competiciones 
de agility desde la plataforma FlowAgility.com. El proceso consta de dos etapas
principales que se ejecutan secuencialmente:

1. üìã M√ìDULO 1: EXTRACCI√ìN DE EVENTOS B√ÅSICOS
   ‚Ä¢ Autenticaci√≥n autom√°tica en FlowAgility.com
   ‚Ä¢ Navegaci√≥n a la p√°gina principal de eventos
   ‚Ä¢ Scroll completo para cargar todos los eventos visibles
   ‚Ä¢ Extracci√≥n estructurada de informaci√≥n b√°sica:
     - ID √∫nico del evento
     - Nombre de la competici√≥n
     - Fechas de celebraci√≥n
     - Organizaci√≥n (FCI/RSCE, RFEC, etc.)
     - Club organizador
     - Lugar/ubicaci√≥n
     - Enlaces a informaci√≥n y participantes
     - Bandera del pa√≠s

2. üìä M√ìDULO 2: INFORMACI√ìN DETALLADA + PARTICIPANTES
   ‚Ä¢ Acceso individual a cada p√°gina de informaci√≥n de evento
   ‚Ä¢ Extracci√≥n de datos adicionales y mejora de informaci√≥n
   ‚Ä¢ Acceso a p√°ginas de listas de participantes
   ‚Ä¢ Conteo preciso del n√∫mero de participantes por evento
   ‚Ä¢ Preservaci√≥n de datos originales con enriquecimiento

üéØ OBJETIVOS PRINCIPALES:
‚Ä¢ Extraer informaci√≥n completa y estructurada de todas las competiciones
‚Ä¢ Obtener el n√∫mero real de participantes por evento
‚Ä¢ Generar archivos JSON consistentes para procesos downstream
‚Ä¢ Mantener compatibilidad con sistemas existentes

üìÅ ARCHIVOS GENERADOS:
‚Ä¢ 01events_YYYY-MM-DD.json       ‚Üí Eventos b√°sicos (con fecha)
‚Ä¢ 01events.json                  ‚Üí Eventos b√°sicos (siempre actual)
‚Ä¢ 02info_YYYY-MM-DD.json         ‚Üí Info detallada + participantes (con fecha)
‚Ä¢ 02info.json                    ‚Üí Info detallada (siempre actual)

‚öôÔ∏è  CONFIGURACI√ìN:
‚Ä¢ Credenciales mediante variables de entorno (.env)
‚Ä¢ Modo headless/visible configurable
‚Ä¢ Pausas aleatorias entre solicitudes
‚Ä¢ Timeouts ajustables para diferentes conexiones

üõ°Ô∏è  CARACTER√çSTICAS T√âCNICAS:
‚Ä¢ Manejo robusto de errores y reintentos
‚Ä¢ Detecci√≥n y aceptaci√≥n autom√°tica de cookies
‚Ä¢ Scroll completo para carga de contenido din√°mico
‚Ä¢ Preservaci√≥n de datos originales en fallos
‚Ä¢ Logging detallado de cada etapa del proceso

üö¶ FLUJO DE EJECUCI√ìN:
1. Inicio de sesi√≥n autom√°tico
2. Aceptaci√≥n de cookies (si es necesario)
3. Carga completa de p√°gina de eventos
4. Extracci√≥n y parsing de HTML
5. Procesamiento individual por evento
6. Generaci√≥n de archivos de salida
7. Resumen estad√≠stico final

üìä ESTAD√çSTICAS CALCULADAS:
‚Ä¢ Total de eventos procesados
‚Ä¢ Eventos con informaci√≥n detallada
‚Ä¢ Eventos con participantes identificados
‚Ä¢ N√∫mero total de participantes
‚Ä¢ Ranking de eventos por participaci√≥n

‚ö†Ô∏è  NOTAS IMPORTANTES:
‚Ä¢ Requiere ChromeDriver compatible
‚Ä¢ Necesita credenciales v√°lidas de FlowAgility
‚Ä¢ Las pausas evitan bloqueos por rate limiting
‚Ä¢ Los archivos se sobrescriben en cada ejecuci√≥n

üîÑ USO:
python flowagility_scraper.py [--module events|info|all]
"""

import os
import sys
import json
import re
import time
import argparse
import traceback
import unicodedata
import random
from datetime import datetime
from urllib.parse import urljoin
from pathlib import Path
from glob import glob

# Third-party imports
try:
    from bs4 import BeautifulSoup
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå Error importando dependencias: {e}")
    sys.exit(1)

# ... el resto del c√≥digo permanece igual ...

import os
import sys
import json
import re
import time
import argparse
import traceback
import unicodedata
import random
from datetime import datetime
from urllib.parse import urljoin
from pathlib import Path
from glob import glob

# Third-party imports
try:
    from bs4 import BeautifulSoup
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå Error importando dependencias: {e}")
    sys.exit(1)

# Selenium imports
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    from selenium.webdriver.chrome.service import Service
    HAS_SELENIUM = True
except ImportError as e:
    print(f"‚ùå Error importando Selenium: {e}")
    HAS_SELENIUM = False

try:
    from webdriver_manager.chrome import ChromeDriverManager
    HAS_WEBDRIVER_MANAGER = True
except ImportError:
    HAS_WEBDRIVER_MANAGER = False

# ============================== CONFIGURACI√ìN GLOBAL ==============================

# Configuraci√≥n base
BASE = "https://www.flowagility.com"
EVENTS_URL = f"{BASE}/zone/events"
SCRIPT_DIR = Path(__file__).resolve().parent

# Cargar variables de entorno
try:
    load_dotenv(SCRIPT_DIR / ".env")
    print("‚úÖ Variables de entorno cargadas")
except Exception as e:
    print(f"‚ùå Error cargando .env: {e}")

# Credenciales
FLOW_EMAIL = os.getenv("FLOW_EMAIL", "pilar1959suarez@gmail.com")
FLOW_PASS = os.getenv("FLOW_PASS", "Seattle1")

# Flags/tunables
HEADLESS = os.getenv("HEADLESS", "true").lower() == "true"
INCOGNITO = os.getenv("INCOGNITO", "true").lower() == "true"
MAX_SCROLLS = int(os.getenv("MAX_SCROLLS", "10"))
SCROLL_WAIT_S = float(os.getenv("SCROLL_WAIT_S", "2.0"))
OUT_DIR = os.getenv("OUT_DIR", "./output")

print(f"üìã Configuraci√≥n: HEADLESS={HEADLESS}, OUT_DIR={OUT_DIR}")

# ============================== UTILIDADES GENERALES ==============================

def log(message):
    """Funci√≥n de logging"""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")

def slow_pause(min_s=1, max_s=2):
    """Pausa aleatoria"""
    time.sleep(random.uniform(min_s, max_s))

def _clean(s: str) -> str:
    """Limpia y normaliza texto"""
    if not s:
        return ""
    s = str(s)
    s = unicodedata.normalize("NFKC", s)
    s = re.sub(r"[ \t]+", " ", s)
    return s.strip(" \t\r\n-‚Ä¢*¬∑:;")

def _clean_output_directory():
    """Limpiar archivos antiguos del directorio de output"""
    try:
        # Mantener solo los archivos esenciales o eliminar todos los antiguos
        files_to_keep = ['config.json', 'settings.ini']  # Archivos de configuraci√≥n a mantener
        
        for file in os.listdir(OUT_DIR):
            if file not in files_to_keep:
                file_path = os.path.join(OUT_DIR, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    log(f"üßπ Eliminado archivo antiguo: {file}")
        
        log("‚úÖ Directorio de output limpiado")
    except Exception as e:
        log(f"‚ö†Ô∏è  Error limpiando directorio: {e}")

# ============================== FUNCIONES DE NAVEGACI√ìN ==============================

def _get_driver(headless=True):
    """Crea y configura el driver de Selenium"""
    if not HAS_SELENIUM:
        raise ImportError("Selenium no est√° instalado")
    
    opts = Options()
    if headless:
        opts.add_argument("--headless=new")
    if INCOGNITO:
        opts.add_argument("--incognito")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--window-size=1920,1080")
    opts.add_argument("--disable-blink-features=AutomationControlled")
    opts.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    try:
        if HAS_WEBDRIVER_MANAGER:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=opts)
        else:
            driver = webdriver.Chrome(options=opts)
        
        driver.set_page_load_timeout(60)
        return driver
        
    except Exception as e:
        log(f"Error creando driver: {e}")
        return None

def _login(driver):
    """Inicia sesi√≥n en FlowAgility"""
    if not driver:
        return False
        
    log("Iniciando login...")
    
    try:
        driver.get(f"{BASE}/user/login")
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        slow_pause(2, 3)
        
        # Buscar campos de login
        email_field = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "user[email]"))
        )
        password_field = driver.find_element(By.NAME, "user[password]")
        submit_button = driver.find_element(By.CSS_SELECTOR, 'button[type="submit"]')
        
        # Llenar campos
        email_field.clear()
        email_field.send_keys(FLOW_EMAIL)
        slow_pause(1, 2)
        
        password_field.clear()
        password_field.send_keys(FLOW_PASS)
        slow_pause(1, 2)
        
        # Hacer clic
        submit_button.click()
        
        # Esperar a que se complete el login
        WebDriverWait(driver, 30).until(
            lambda d: "/user/login" not in d.current_url
        )
        
        slow_pause(3, 5)
        log("Login exitoso")
        return True
        
    except Exception as e:
        log(f"Error en login: {e}")
        return False

def _accept_cookies(driver):
    """Aceptar cookies si es necesario"""
    try:
        cookie_selectors = [
            'button[aria-label="Accept all"]',
            'button[aria-label="Aceptar todo"]',
            '[data-testid="uc-accept-all-button"]',
            'button[mode="primary"]'
        ]
        
        for selector in cookie_selectors:
            try:
                cookie_btn = driver.find_elements(By.CSS_SELECTOR, selector)
                if cookie_btn:
                    cookie_btn[0].click()
                    slow_pause(0.5, 1)
                    log("Cookies aceptadas")
                    return True
            except:
                continue
                
        # Fallback con JavaScript
        driver.execute_script("""
            const buttons = document.querySelectorAll('button');
            for (const btn of buttons) {
                if (/aceptar|accept|consent|agree/i.test(btn.textContent)) {
                    btn.click();
                    break;
                }
            }
        """)
        slow_pause(0.5, 1)
        return True
        
    except Exception as e:
        log(f"Error manejando cookies: {e}")
        return False

def _full_scroll(driver):
    """Scroll completo para cargar todos los elementos"""
    last_height = driver.execute_script("return document.body.scrollHeight")
    for _ in range(MAX_SCROLLS):
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(SCROLL_WAIT_S)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

# ============================== M√ìDULO 1: EXTRACCI√ìN DE EVENTOS ==============================

def extract_events():
    """Funci√≥n principal para extraer eventos b√°sicos"""
    if not HAS_SELENIUM:
        log("Error: Selenium no est√° instalado")
        return None
    
    log("=== M√ìDULO 1: EXTRACCI√ìN DE EVENTOS B√ÅSICOS ===")
    
    driver = _get_driver(headless=HEADLESS)
    if not driver:
        log("‚ùå No se pudo crear el driver de Chrome")
        return None
    
    try:
        if not _login(driver):
            raise Exception("No se pudo iniciar sesi√≥n")
        
        # Navegar a eventos
        log("Navegando a la p√°gina de eventos...")
        driver.get(EVENTS_URL)
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # Aceptar cookies
        _accept_cookies(driver)
        
        # Scroll completo para cargar todos los eventos
        log("Cargando todos los eventos...")
        _full_scroll(driver)
        slow_pause(2, 3)
        
        # Obtener HTML de la p√°gina
        page_html = driver.page_source
        
        # Extraer eventos usando BeautifulSoup
        log("Extrayendo informaci√≥n de eventos...")
        soup = BeautifulSoup(page_html, 'html.parser')
        
        # Buscar contenedores de eventos
        event_containers = soup.find_all('div', class_='group mb-6')
        log(f"Encontrados {len(event_containers)} contenedores de eventos")
        
        events = []
        for i, container in enumerate(event_containers, 1):
            try:
                # Extraer informaci√≥n completa del evento
                event_data = {}
                
                # ID del evento
                event_id = container.get('id', '')
                if event_id:
                    event_data['id'] = event_id.replace('event-card-', '')
                
                # Nombre del evento
                name_elem = container.find('div', class_='font-caption text-lg text-black truncate -mt-1')
                if name_elem:
                    event_data['nombre'] = _clean(name_elem.get_text())
                
                # Fechas
                date_elem = container.find('div', class_='text-xs')
                if date_elem:
                    event_data['fechas'] = _clean(date_elem.get_text())
                
                # Organizaci√≥n
                org_elems = container.find_all('div', class_='text-xs')
                if len(org_elems) > 1:
                    event_data['organizacion'] = _clean(org_elems[1].get_text())
                
                # Club organizador - BUSCAR ESPEC√çFICAMENTE
                club_elem = container.find('div', class_='text-xs mb-0.5 mt-0.5')
                if club_elem:
                    event_data['club'] = _clean(club_elem.get_text())
                else:
                    # Fallback: buscar en todos los divs con text-xs
                    for div in container.find_all('div', class_='text-xs'):
                        text = _clean(div.get_text())
                        if text and not any(x in text for x in ['/', 'Spain', 'Espa√±a']):
                            event_data['club'] = text
                            break
                
                # Lugar - BUSCAR PATR√ìN CIUDAD/PA√çS
                location_divs = container.find_all('div', class_='text-xs')
                for div in location_divs:
                    text = _clean(div.get_text())
                    if '/' in text and any(x in text for x in ['Spain', 'Espa√±a', 'Madrid', 'Barcelona']):
                        event_data['lugar'] = text
                        break
                
                # Si no encontramos lugar, buscar cualquier texto con /
                if 'lugar' not in event_data:
                    for div in location_divs:
                        text = _clean(div.get_text())
                        if '/' in text and len(text) < 100:  # Evitar textos muy largos
                            event_data['lugar'] = text
                            break
                
                # Enlaces
                event_data['enlaces'] = {}
                
                # Enlace de informaci√≥n
                info_link = container.find('a', href=lambda x: x and '/info/' in x)
                if info_link:
                    event_data['enlaces']['info'] = urljoin(BASE, info_link['href'])
                
                # Enlace de participantes - BUSCAR EXPL√çCITAMENTE
                participant_links = container.find_all('a', href=lambda x: x and any(term in x for term in ['/participants', '/participantes']))
                for link in participant_links:
                    href = link.get('href', '')
                    if '/participants_list' in href or '/participantes' in href:
                        event_data['enlaces']['participantes'] = urljoin(BASE, href)
                        break
                
                # Si no encontramos el enlace de participantes, construirlo
                if 'participantes' not in event_data['enlaces'] and 'id' in event_data:
                    event_data['enlaces']['participantes'] = f"{BASE}/zone/events/{event_data['id']}/participants_list"
                
                # Bandera del pa√≠s
                flag_elem = container.find('div', class_='text-md')
                if flag_elem:
                    event_data['pais_bandera'] = _clean(flag_elem.get_text())
                else:
                    event_data['pais_bandera'] = 'üá™üá∏'  # Valor por defecto
                
                events.append(event_data)
                log(f"‚úÖ Evento {i} procesado: {event_data.get('nombre', 'Sin nombre')}")
                
            except Exception as e:
                log(f"‚ùå Error procesando evento {i}: {str(e)}")
                continue
        
        # Guardar resultados
        today_str = datetime.now().strftime("%Y-%m-%d")
        output_file = os.path.join(OUT_DIR, f'01events_{today_str}.json')
        os.makedirs(OUT_DIR, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)
        
        # Crear tambi√©n un archivo sin fecha para consistencia
        latest_file = os.path.join(OUT_DIR, '01events.json')
        with open(latest_file, 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)
        
        log(f"‚úÖ Extracci√≥n completada. {len(events)} eventos guardados en {output_file}")
        
        # Mostrar resumen de lo extra√≠do
        print(f"\n{'='*80}")
        print("RESUMEN DE CAMPOS EXTRA√çDOS:")
        print(f"{'='*80}")
        for event in events[:3]:  # Mostrar primeros 3 eventos como ejemplo
            print(f"\nEvento: {event.get('nombre', 'N/A')}")
            print(f"  Club: {event.get('club', 'No extra√≠do')}")
            print(f"  Lugar: {event.get('lugar', 'No extra√≠do')}")
            print(f"  Enlace participantes: {event.get('enlaces', {}).get('participantes', 'No extra√≠do')}")
        print(f"\n{'='*80}")
        
        return events
        
    except Exception as e:
        log(f"‚ùå Error durante el scraping: {str(e)}")
        traceback.print_exc()
        return None
    finally:
        try:
            driver.quit()
            log("Navegador cerrado")
        except:
            pass

# ============================== M√ìDULO 2: INFORMACI√ìN DETALLADA ==============================

def _count_participants_correctly(soup):
    """Contar n√∫mero de participantes REALES usando m√©todos espec√≠ficos para FlowAgility"""
    try:
        # M√©todo 1: Buscar botones de detalles de participantes (enfoque principal)
        detail_buttons = soup.find_all(attrs={'phx-click': lambda x: x and 'booking_details' in x})
        if detail_buttons:
            return len(detail_buttons)
        
        # M√©todo 2: Buscar elementos con booking_id
        booking_elements = soup.find_all(attrs={'phx-value-booking_id': True})
        if booking_elements:
            return len(booking_elements)
        
        # M√©todo 3: Buscar por clases espec√≠ficas de FlowAgility
        participant_classes = [
            '[class*="participant"]',
            '[class*="competitor"]',
            '[class*="booking"]',
            '[class*="inscrito"]'
        ]
        
        for class_selector in participant_classes:
            elements = soup.select(class_selector)
            if elements and 1 <= len(elements) <= 200:  # Rango razonable
                return len(elements)
        
        # M√©todo 4: Buscar en tablas
        tables = soup.find_all('table')
        for table in tables:
            rows = table.find_all('tr')
            # Si la tabla tiene m√°s de 1 fila y parece ser de participantes
            if len(rows) > 1:
                first_row_text = rows[0].get_text().lower()
                if any(keyword in first_row_text for keyword in ['dorsal', 'gu√≠a', 'perro', 'nombre']):
                    return len(rows) - 1  # Restar la fila de encabezados
                return len(rows)
        
        # M√©todo 5: Buscar texto que indique n√∫mero de participantes
        page_text = soup.get_text().lower()
        count_patterns = [
            r'(\d+)\s*participantes?',
            r'(\d+)\s*inscritos?',
            r'(\d+)\s*competidores?',
            r'total:\s*(\d+)',
            r'inscripciones:\s*(\d+)'
        ]
        
        for pattern in count_patterns:
            match = re.search(pattern, page_text)
            if match:
                count = int(match.group(1))
                if 1 <= count <= 200:  # Rango v√°lido
                    return count
        
        # M√©todo 6: Si la p√°gina indica que no hay participantes
        if any(phrase in page_text for phrase in ['no hay participantes', 'sin participantes', 'no participants', 'empty', '0 participantes']):
            return 0
        
        # Si no encontramos nada, devolver 0 en lugar de un n√∫mero incorrecto
        return 0
        
    except Exception as e:
        log(f"Error contando participantes: {e}")
        return 0

def extract_detailed_info():
    """Extraer informaci√≥n detallada de cada evento incluyendo n√∫mero de participantes"""
    if not HAS_SELENIUM:
        log("Error: Selenium no est√° instalado")
        return None
    
    log("=== M√ìDULO 2: EXTRACCI√ìN DE INFORMACI√ìN DETALLADA ===")
    
    # Buscar el archivo de eventos m√°s reciente
    event_files = glob(os.path.join(OUT_DIR, "01events_*.json"))
    if not event_files:
        log("‚ùå No se encontraron archivos de eventos")
        return None
    
    latest_event_file = max(event_files, key=os.path.getctime)
    
    # Cargar eventos
    with open(latest_event_file, 'r', encoding='utf-8') as f:
        events = json.load(f)
    
    log(f"‚úÖ Cargados {len(events)} eventos desde {latest_event_file}")
    
    driver = _get_driver(headless=HEADLESS)
    if not driver:
        log("‚ùå No se pudo crear el driver de Chrome")
        return None
    
    try:
        if not _login(driver):
            raise Exception("No se pudo iniciar sesi√≥n")
        
        detailed_events = []
        
        for i, event in enumerate(events, 1):
            try:
                # PRESERVAR CAMPOS ORIGINALES IMPORTANTES
                preserved_fields = ['id', 'nombre', 'fechas', 'organizacion', 'club', 'lugar', 'enlaces', 'pais_bandera']
                detailed_event = {field: event.get(field, '') for field in preserved_fields}
                
                # Inicializar contador de participantes
                detailed_event['numero_participantes'] = 0
                detailed_event['participantes_info'] = 'No disponible'
                
                # Verificar si tiene enlace de informaci√≥n
                info_processed = False
                if 'enlaces' in event and 'info' in event['enlaces']:
                    info_url = event['enlaces']['info']
                    
                    log(f"Procesando evento {i}/{len(events)}: {event.get('nombre', 'Sin nombre')}")
                    
                    try:
                        # Navegar a la p√°gina de informaci√≥n
                        driver.get(info_url)
                        WebDriverWait(driver, 15).until(
                            EC.presence_of_element_located((By.TAG_NAME, "body"))
                        )
                        
                        slow_pause(2, 3)
                        
                        # Obtener HTML de la p√°gina
                        page_html = driver.page_source
                        soup = BeautifulSoup(page_html, 'html.parser')
                        
                        # ===== INFORMACI√ìN ADICIONAL =====
                        additional_info = {}
                        
                        # Intentar mejorar informaci√≥n de club si no est√° completa
                        if not detailed_event.get('club') or detailed_event.get('club') in ['N/D', '']:
                            club_elems = soup.find_all(lambda tag: any(word in tag.get_text().lower() for word in ['club', 'organizador', 'organizer']))
                            for elem in club_elems:
                                text = _clean(elem.get_text())
                                if text and len(text) < 100:
                                    detailed_event['club'] = text
                                    break
                        
                        # Intentar mejorar informaci√≥n de lugar si no est√° completa
                        if not detailed_event.get('lugar') or detailed_event.get('lugar') in ['N/D', '']:
                            location_elems = soup.find_all(lambda tag: any(word in tag.get_text().lower() for word in ['lugar', 'ubicacion', 'location', 'place']))
                            for elem in location_elems:
                                text = _clean(elem.get_text())
                                if text and ('/' in text or any(x in text for x in ['Spain', 'Espa√±a'])):
                                    detailed_event['lugar'] = text
                                    break
                        
                        # Extraer informaci√≥n general adicional
                        title_elem = soup.find('h1')
                        if title_elem:
                            additional_info['titulo_completo'] = _clean(title_elem.get_text())
                        
                        # Extraer descripci√≥n si existe
                        description_elem = soup.find('div', class_=lambda x: x and any(word in str(x).lower() for word in ['description', 'descripcion', 'info']))
                        if description_elem:
                            additional_info['descripcion'] = _clean(description_elem.get_text())
                        
                        # A√±adir informaci√≥n adicional al evento
                        detailed_event['informacion_adicional'] = additional_info
                        info_processed = True
                        
                    except Exception as e:
                        log(f"  ‚ùå Error procesando informaci√≥n: {e}")
                
                # ===== EXTRAER N√öMERO DE PARTICIPANTES =====
                if 'enlaces' in event and 'participantes' in event['enlaces']:
                    participants_url = event['enlaces']['participantes']
                    log(f"  Extrayendo n√∫mero de participantes de: {participants_url}")
                    
                    try:
                        # Navegar a la p√°gina de participantes
                        driver.get(participants_url)
                        WebDriverWait(driver, 15).until(
                            EC.presence_of_element_located((By.TAG_NAME, "body"))
                        )
                        
                        slow_pause(2, 3)
                        
                        # Obtener HTML de la p√°gina de participantes
                        participants_html = driver.page_source
                        participants_soup = BeautifulSoup(participants_html, 'html.parser')
                        
                        # Contar participantes con m√©todo mejorado
                        num_participants = _count_participants_correctly(participants_soup)
                        
                        if num_participants > 0:
                            detailed_event['numero_participantes'] = num_participants
                            detailed_event['participantes_info'] = f"{num_participants} participantes"
                            log(f"  ‚úÖ Encontrados {num_participants} participantes")
                        else:
                            detailed_event['numero_participantes'] = 0
                            detailed_event['participantes_info'] = 'Sin participantes'
                            log(f"  ‚ö†Ô∏è  No se encontraron participantes")
                            
                    except Exception as e:
                        log(f"  ‚ùå Error accediendo a participantes: {e}")
                        detailed_event['numero_participantes'] = 0
                        detailed_event['participantes_info'] = f"Error: {str(e)}"
                
                detailed_event['timestamp_extraccion'] = datetime.now().isoformat()
                detailed_event['procesado_info'] = info_processed
                detailed_events.append(detailed_event)
                slow_pause(1, 2)
                
            except Exception as e:
                log(f"‚ùå Error procesando evento {i}: {str(e)}")
                # Mantener datos b√°sicos del evento
                event['timestamp_extraccion'] = datetime.now().isoformat()
                event['procesado_info'] = False
                event['numero_participantes'] = 0
                event['participantes_info'] = f"Error: {str(e)}"
                detailed_events.append(event)
                continue
        
        # Guardar informaci√≥n detallada
        today_str = datetime.now().strftime("%Y-%m-%d")
        output_file = os.path.join(OUT_DIR, f'02info_{today_str}.json')
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(detailed_events, f, ensure_ascii=False, indent=2)
        
        # Crear tambi√©n un archivo sin fecha para consistencia
        latest_file = os.path.join(OUT_DIR, '02info.json')
        with open(latest_file, 'w', encoding='utf-8') as f:
            json.dump(detailed_events, f, ensure_ascii=False, indent=2)
        
        log(f"‚úÖ Informaci√≥n detallada guardada en {output_file}")
        
        # Mostrar resumen de participantes
        total_participants = sum(event.get('numero_participantes', 0) for event in detailed_events)
        events_with_participants = sum(1 for event in detailed_events if event.get('numero_participantes', 0) > 0)
        events_with_info = sum(1 for event in detailed_events if event.get('procesado_info', False))
        
        print(f"\n{'='*80}")
        print("RESUMEN FINAL:")
        print(f"{'='*80}")
        print(f"Eventos procesados: {len(detailed_events)}")
        print(f"Eventos con informaci√≥n detallada: {events_with_info}")
        print(f"Eventos con participantes: {events_with_participants}")
        print(f"Total participantes: {total_participants}")
        
        # Mostrar eventos con m√°s participantes
        if events_with_participants > 0:
            print(f"\nüìä Eventos con m√°s participantes:")
            sorted_events = sorted([e for e in detailed_events if e.get('numero_participantes', 0) > 0], 
                                 key=lambda x: x.get('numero_participantes', 0), reverse=True)
            for event in sorted_events[:5]:
                print(f"  {event.get('nombre', 'N/A')}: {event.get('numero_participantes')} participantes")
        
        print(f"\n{'='*80}")
        
        return detailed_events
        
    except Exception as e:
        log(f"‚ùå Error durante la extracci√≥n detallada: {str(e)}")
        traceback.print_exc()
        return None
    finally:
        try:
            driver.quit()
        except:
            pass

# ============================== FUNCI√ìN PRINCIPAL ==============================

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO FLOWAGILITY SCRAPER")
    print("üìã Este proceso realizar√° la extracci√≥n de eventos e informaci√≥n detallada")
    print(f"üìÇ Directorio de salida: {OUT_DIR}")
    print("=" * 80)
    
    # Crear directorio de output
    os.makedirs(OUT_DIR, exist_ok=True)
    
    # Limpiar archivos antiguos
    _clean_output_directory()
    
    parser = argparse.ArgumentParser(description="FlowAgility Scraper - Eventos e Info Detallada")
    parser.add_argument("--module", choices=["events", "info", "all"], default="all", help="M√≥dulo a ejecutar")
    args = parser.parse_args()
    
    try:
        success = True
        
        # M√≥dulo 1: Eventos b√°sicos
        if args.module in ["events", "all"]:
            log("üèÅ INICIANDO EXTRACCI√ìN DE EVENTOS B√ÅSICOS")
            events = extract_events()
            if not events:
                log("‚ùå Fall√≥ la extracci√≥n de eventos")
                success = False
            else:
                log("‚úÖ Eventos b√°sicos extra√≠dos correctamente")
        
        # M√≥dulo 2: Informaci√≥n detallada
        if args.module in ["info", "all"] and success:
            log("üèÅ INICIANDO EXTRACCI√ìN DE INFORMACI√ìN DETALLADA")
            detailed_events = extract_detailed_info()
            if not detailed_events:
                log("‚ö†Ô∏è  No se pudo extraer informaci√≥n detallada")
            else:
                log("‚úÖ Informaci√≥n detallada extra√≠da correctamente")
        
        if success:
            log("üéâ PROCESO COMPLETADO EXITOSAMENTE")
            
            # Mostrar solo archivos nuevos generados
            print(f"\nüìÅ ARCHIVOS GENERADOS EN {OUT_DIR}:")
            output_files = glob(os.path.join(OUT_DIR, "*"))
            for file in sorted(output_files):
                if os.path.isfile(file):
                    size = os.path.getsize(file)
                    print(f"   {os.path.basename(file)} - {size} bytes")
                    
        else:
            log("‚ùå PROCESO COMPLETADO CON ERRORES")
        
        return success
        
    except Exception as e:
        log(f"‚ùå ERROR CR√çTICO DURANTE LA EJECUCI√ìN: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
